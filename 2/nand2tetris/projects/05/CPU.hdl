// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //Instruction handling
    decode(instructions=instruction, out[0]=d0, out[1]=d1, out[2]=d2, out[3]=d3, out[4]=d4, out[5]=d5, out[6]=d6, out[7]=d7, out[8]=d8, out[9]=d9, out[10]=d10, out[11]=d11, out[12]=d12, out[13]=d13, out[14]=d14, out[15]=d15);
    Mux16(a=instruction, b=ALUout, sel=d15, out=w0);

    //A register
    Not(in=d15, out=notd15);
    Or(a=notd15, b=d5, out=loadA);
    Register(in=w0, load=loadA, out=A);     

    //A or M output
    Mux16(a=A, b=inM, sel=d12, out=AM);

    //ALU
    ALU(x=D, y=AM, zx=d11, nx=d10, zy=d9, ny=d8, f=d7, no=d6, out=ALUout, zr=zr, ng=ng);
    And16(a=ALUout, b=ALUout, out=outM);



    //writeM output
    And(a=d3, b=d3, out=writeM);

    //addressM output
    sixteentofifteen(in=A, out=addressM);

    //D register
    Register(in=ALUout, load=d4, out=D);
   
    //PC logic
    PC-handler(Cinstruction[0]=d0, Cinstruction[1]=d1, Cinstruction[2]=d2, Cinstruction[3]=d3, Cinstruction[4]=d4, 
               Cinstruction[5]=d5, Cinstruction[6]=d6, Cinstruction[7]=d7, Cinstruction[8]=d8, Cinstruction[9]=d9, 
               Cinstruction[10]=d10, Cinstruction[11]=d11, Cinstruction[12]=d12, Cinstruction[13]=d13, 
               Cinstruction[14]=d14, Cinstruction[15]=d15, zr=zr, ng=ng, out=load);
    Not(in=load, out=notload);
    PC(in=A,load=load, inc=notload, reset=reset, out=pcpre);
    sixteentofifteen(in=pcpre, out=pc);



}
